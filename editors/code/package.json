{
  "name": "luau-lsp",
  "displayName": "Luau Language Server",
  "description": "A Language Server Client for Luau",
  "author": "JohnnyMorganz",
  "publisher": "JohnnyMorganz",
  "license": "MIT",
  "icon": "assets/icon.png",
  "homepage": "https://github.com/JohnnyMorganz/luau-lsp",
  "repository": {
    "type": "git",
    "url": "https://github.com/JohnnyMorganz/luau-lsp"
  },
  "bugs": {
    "url": "https://github.com/JohnnyMorganz/luau-lsp/issues"
  },
  "version": "1.31.1",
  "engines": {
    "vscode": "^1.67.0"
  },
  "categories": [
    "Programming Languages",
    "Linters"
  ],
  "keywords": [
    "lua",
    "luau",
    "roblox"
  ],
  "activationEvents": [
    "onLanguage:luau"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "languages": [
      {
        "id": "luau",
        "aliases": [
          "Luau"
        ],
        "extensions": [
          ".luau",
          ".lua"
        ],
        "configuration": "./language-configuration.json",
        "icon": {
          "light": "./assets/file-icon-light.svg",
          "dark": "./assets/file-icon-dark.svg"
        }
      }
    ],
    "grammars": [
      {
        "language": "luau",
        "scopeName": "source.luau",
        "path": "./syntaxes/Luau.tmLanguage.json",
        "tokenTypes": {
          "meta.template.expression": "other",
          "meta.template.expression string": "string",
          "meta.template.expression comment": "comment"
        }
      },
      {
        "scopeName": "markdown.luau.codeblock",
        "path": "./syntaxes/codeblock.json",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.luau": "luau"
        }
      }
    ],
    "semanticTokenScopes": [
      {
        "language": "luau",
        "scopes": {
          "variable.defaultLibrary.readonly": [
            "constant.language.global.luau"
          ],
          "property.defaultLibrary": [
            "variable.language.luau"
          ],
          "enum.defaultLibrary": [
            "constant.language.enum.luau"
          ]
        }
      }
    ],
    "commands": [
      {
        "command": "luau-lsp.updateApi",
        "title": "Luau: Redownload API Types"
      },
      {
        "command": "luau-lsp.regenerateSourcemap",
        "title": "Luau: Regenerate Rojo Sourcemap"
      },
      {
        "command": "luau-lsp.reloadServer",
        "title": "Luau: Reload Language Server"
      },
      {
        "command": "luau-lsp.computeBytecode",
        "title": "Luau: Compute Bytecode for file",
        "enablement": "resourceLangId == luau"
      },
      {
        "command": "luau-lsp.computeCompilerRemarks",
        "title": "Luau: Compute Compiler Remarks for file",
        "enablement": "resourceLangId == luau"
      }
    ],
    "menus": {
      "editor/title": [
        {
          "when": "resourceLangId == luau",
          "command": "luau-lsp.computeBytecode"
        },
        {
          "when": "resourceLangId == luau",
          "command": "luau-lsp.computeCompilerRemarks"
        }
      ]
    },
    "configuration": {
      "title": "Luau Language Server",
      "properties": {
        "luau.trace.server": {
          "markdownDescription": "Traces the communication between VS Code and the Luau language server.",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "scope": "window",
          "default": "off"
        },
        "luau-lsp.ignoreGlobs": {
          "markdownDescription": "Diagnostics will not be reported for any file matching these globs unless the file is currently open",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "**/_Index/**"
          ],
          "scope": "resource"
        },
        "luau-lsp.platform.type": {
          "markdownDescription": "Platform-specific support features",
          "type": "string",
          "enum": [
            "standard",
            "roblox"
          ],
          "scope": "window",
          "default": "roblox"
        },
        "luau-lsp.sourcemap.enabled": {
          "markdownDescription": "Whether Rojo sourcemap parsing is enabled",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.sourcemap.autogenerate": {
          "markdownDescription": "Automatically run the `rojo sourcemap` command to regenerate sourcemaps on changes",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.sourcemap.rojoPath": {
          "markdownDescription": "Path to the Rojo executable. If not provided, attempts to run `rojo` in the workspace directory, so it must be available on the PATH",
          "type": "string",
          "default": null,
          "scope": "resource"
        },
        "luau-lsp.sourcemap.rojoProjectFile": {
          "markdownDescription": "The name of the Rojo project file to generate a sourcemap for.\nOnly applies if `#luau-lsp.sourcemap.autogenerate#` is enabled",
          "type": "string",
          "default": "default.project.json",
          "scope": "resource"
        },
        "luau-lsp.sourcemap.includeNonScripts": {
          "markdownDescription": "Include non-script instances in the generated sourcemap",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.fflags.enableByDefault": {
          "markdownDescription": "Enable all (boolean) Luau FFlags by default. These flags can later be overriden by `#luau-lsp.fflags.override#` and `#luau-lsp.fflags.sync#`",
          "type": "boolean",
          "default": false,
          "scope": "window"
        },
        "luau-lsp.fflags.sync": {
          "markdownDescription": "Sync currently enabled FFlags with Roblox's published FFlags.\nThis currently only syncs FFlags which begin with 'Luau'",
          "type": "boolean",
          "default": true,
          "scope": "window",
          "tags": [
            "usesOnlineServices"
          ]
        },
        "luau-lsp.fflags.override": {
          "markdownDescription": "Override FFlags passed to Luau",
          "type": "object",
          "default": {},
          "additionalProperties": {
            "type": "string"
          },
          "scope": "window"
        },
        "luau-lsp.diagnostics.includeDependents": {
          "markdownDescription": "Recompute diagnostics for dependents when a file changes. If `#luau-lsp.diagnostics.workspace#` is enabled, this is ignored",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.diagnostics.workspace": {
          "markdownDescription": "Compute diagnostics for the whole workspace",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "luau-lsp.diagnostics.strictDatamodelTypes": {
          "markdownDescription": "Use strict DataModel types in diagnostics. When on, this is equivalent to the more expressive autocompletion types. When this is off, `game`/`script`/`workspace` (and their members) are all typed as `any`, and helps to prevent false positives. [Read More](https://github.com/JohnnyMorganz/luau-lsp/issues/83#issuecomment-1192865024)",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "luau-lsp.types.definitionFiles": {
          "markdownDescription": "A mapping of package names to paths of definition files to load in to the type checker. Note that definition file syntax is currently unstable and may change at any time",
          "type": "object",
          "default": {},
          "additionalProperties": {
            "type": "string"
          },
          "scope": "window"
        },
        "luau-lsp.types.documentationFiles": {
          "markdownDescription": "A list of paths to documentation files which provide documentation support to the definition files provided",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "scope": "window"
        },
        "luau-lsp.types.roblox": {
          "markdownDescription": "Load in and automatically update Roblox type definitions for the type checker",
          "type": "boolean",
          "default": true,
          "scope": "window",
          "tags": [
            "usesOnlineServices"
          ],
          "markdownDeprecationMessage": "**Deprecated**: Please use `#luau-lsp.platform.type#` instead.",
          "deprecationMessage": "Deprecated: Please use luau-lsp.platform.type instead."
        },
        "luau-lsp.types.robloxSecurityLevel": {
          "markdownDescription": "Security Level to use in the Roblox API definitions",
          "type": "string",
          "default": "PluginSecurity",
          "scope": "window",
          "enum": [
            "None",
            "LocalUserSecurity",
            "PluginSecurity",
            "RobloxScriptSecurity"
          ]
        },
        "luau-lsp.inlayHints.parameterNames": {
          "markdownDescription": "Show inlay hints for function parameter names",
          "type": "string",
          "default": "none",
          "enum": [
            "none",
            "literals",
            "all"
          ],
          "scope": "resource"
        },
        "luau-lsp.inlayHints.variableTypes": {
          "markdownDescription": "Show inlay hints for variable types",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "luau-lsp.inlayHints.parameterTypes": {
          "markdownDescription": "Show inlay hints for parameter types",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "luau-lsp.inlayHints.functionReturnTypes": {
          "markdownDescription": "Show inlay hints for function return types",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "luau-lsp.inlayHints.typeHintMaxLength": {
          "markdownDescription": "The maximum length a type hint should be before being truncated",
          "type": "number",
          "default": 50,
          "minimum": 10,
          "scope": "resource"
        },
        "luau-lsp.inlayHints.makeInsertable": {
          "markdownDescription": "Whether type annotation inlay hints can be made insertable by clicking",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.hover.enabled": {
          "markdownDescription": "Enable hover",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.hover.showTableKinds": {
          "markdownDescription": "Show table kinds",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "luau-lsp.hover.multilineFunctionDefinitions": {
          "markdownDescription": "Show function definitions on multiple lines",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "luau-lsp.hover.strictDatamodelTypes": {
          "markdownDescription": "Use strict DataModel types in hover display. When on, this is equivalent to autocompletion types. When off, this is equivalent to diagnostic types",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.hover.includeStringLength": {
          "markdownDescription": "Show string length when hovering over a string literal",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.completion.enabled": {
          "markdownDescription": "Enable autocomplete",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.autocompleteEnd": {
          "markdownDescription": "Automatically insert an `end` when opening a block",
          "type": "boolean",
          "default": false,
          "scope": "resource",
          "markdownDeprecationMessage": "**Deprecated**: Please use `#luau-lsp.completion.autocompleteEnd#` instead.",
          "deprecationMessage": "Deprecated: Please use luau-lsp.completion.autocompleteEnd instead."
        },
        "luau-lsp.completion.autocompleteEnd": {
          "markdownDescription": "Automatically insert an `end` when opening a block",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "luau-lsp.completion.addParentheses": {
          "markdownDescription": "Add parentheses after completing a function call",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.completion.addTabstopAfterParentheses": {
          "markdownDescription": "If `#luau-lsp.completion.addParentheses#` is enabled, then include a tabstop after the parentheses for the cursor to move to",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.completion.fillCallArguments": {
          "markdownDescription": "Fill parameter names in an autocompleted function call, which can be tabbed through. Requires `#luau-lsp.completion.addParentheses#` to be enabled",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.completion.showPropertiesOnMethodCall": {
          "markdownDescription": "Whether to show non-function properties when performing a method call with a colon (e.g., `foo:bar`)",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "luau-lsp.completion.suggestImports": {
          "markdownDescription": "Suggest automatic imports in completion items",
          "type": "boolean",
          "default": false,
          "scope": "resource",
          "markdownDeprecationMessage": "**Deprecated**: Please use `#luau-lsp.completion.imports.enabled#` instead.",
          "deprecationMessage": "Deprecated: Please use luau-lsp.completion.imports.enabled instead."
        },
        "luau-lsp.completion.imports.enabled": {
          "markdownDescription": "Suggest automatic imports in completion items",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "luau-lsp.completion.imports.suggestServices": {
          "markdownDescription": "Whether GetService completions are suggested in autocomplete",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.completion.imports.suggestRequires": {
          "markdownDescription": "Whether module requires are suggested in autocomplete",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.completion.imports.requireStyle": {
          "markdownDescription": "The style of requires when autocompleted",
          "type": "string",
          "default": "auto",
          "enum": [
            "auto",
            "alwaysRelative",
            "alwaysAbsolute"
          ],
          "enumDescriptions": [
            "Automatically compute the style of require to use based on heuristics",
            "Always require the module relative to the current file",
            "Always require the module absolute based on root"
          ],
          "scope": "resource"
        },
        "luau-lsp.completion.imports.separateGroupsWithLine": {
          "markdownDescription": "Whether services and requires should be separated by an empty line",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "luau-lsp.signatureHelp.enabled": {
          "markdownDescription": "Enable signature help",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "luau-lsp.plugin.enabled": {
          "markdownDescription": "Use Roblox Studio Plugin to provide DataModel information",
          "type": "boolean",
          "default": false,
          "scope": "window"
        },
        "luau-lsp.plugin.port": {
          "markdownDescription": "Port number to connect to the Studio Plugin",
          "type": "number",
          "default": 3667,
          "scope": "window"
        },
        "luau-lsp.plugin.maximumRequestBodySize": {
          "markdownDescription": "The maximum request body size accepted from the plugin, in a string representation parse-able by the [bytes](https://www.npmjs.com/package/bytes) library",
          "type": "string",
          "default": "3mb",
          "scope": "window"
        },
        "luau-lsp.require.mode": {
          "markdownDescription": "How string requires should be interpreted",
          "type": "string",
          "default": "relativeToWorkspaceRoot",
          "enum": [
            "relativeToWorkspaceRoot",
            "relativeToFile"
          ],
          "enumDescriptions": [
            "String requires are interpreted relative to the root of the workspace",
            "String requires are interpreted relative to the current file"
          ]
        },
        "luau-lsp.require.fileAliases": {
          "markdownDescription": "A mapping of custom require string aliases to file paths",
          "type": "object",
          "default": {},
          "additionalProperties": {
            "type": "string"
          },
          "scope": "resource"
        },
        "luau-lsp.require.directoryAliases": {
          "markdownDescription": "A mapping of custom require string prefixes to directory paths. The aliases should include trailing slashes",
          "type": "object",
          "default": {},
          "additionalProperties": {
            "type": "string"
          },
          "scope": "resource"
        },
        "luau-lsp.index.enabled": {
          "type": "boolean",
          "default": true,
          "scope": "window",
          "markdownDescription": "Whether all files in a workspace should be indexed into memory. If disabled, only limited support is available for features such as 'Find All References' and 'Rename'"
        },
        "luau-lsp.index.maxFiles": {
          "type": "number",
          "default": 10000,
          "scope": "window",
          "markdownDescription": "The maximum amount of files that can be indexed. If more files are indexed, more memory is needed"
        },
        "luau-lsp.bytecode.debugLevel": {
          "type": "number",
          "default": 1,
          "scope": "resource",
          "minimum": 0,
          "maximum": 2,
          "markdownDescription": "The `debugLevel` to use when compiling bytecode"
        },
        "luau-lsp.bytecode.typeInfoLevel": {
          "type": "number",
          "default": 1,
          "scope": "resource",
          "minimum": 0,
          "maximum": 1,
          "markdownDescription": "The `typeInfoLevel` to use when compiling bytecode"
        },
        "luau-lsp.bytecode.vectorLib": {
          "type": "string",
          "default": "Vector3",
          "scope": "resource",
          "markdownDescription": "The `vectorLib` to use when compiling bytecode"
        },
        "luau-lsp.bytecode.vectorCtor": {
          "type": "string",
          "default": "new",
          "scope": "resource",
          "markdownDescription": "The `vectorCtor` to use when compiling bytecode"
        },
        "luau-lsp.bytecode.vectorType": {
          "type": "string",
          "default": "Vector3",
          "scope": "resource",
          "markdownDescription": "The `vectorType` to use when compiling bytecode"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "vscode-test",
    "check:format": "prettier --check src"
  },
  "devDependencies": {
    "@types/express": "^4.17.14",
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.1",
    "@types/node": "14.x",
    "@types/vscode": "^1.67.0",
    "@typescript-eslint/eslint-plugin": "^5.21.0",
    "@typescript-eslint/parser": "^5.21.0",
    "@vscode/test-cli": "^0.0.4",
    "@vscode/test-electron": "^2.3.8",
    "eslint": "^8.14.0",
    "glob": "^8.0.1",
    "mocha": "^9.2.2",
    "prettier": "^2.6.2",
    "ts-loader": "^9.2.8",
    "typescript": "^4.6.4",
    "webpack": "^5.76.0",
    "webpack-cli": "^4.9.2"
  },
  "dependencies": {
    "express": "^4.19.2",
    "node-fetch": "^3.2.4",
    "vscode-languageclient": "^8.1.0-next.6"
  }
}
