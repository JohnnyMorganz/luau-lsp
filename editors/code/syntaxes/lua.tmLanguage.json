{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Luau",
  "patterns": [
    {
      "begin": "\\b(?:(local)\\s*)?(function)\\s*([a-zA-Z_]\\w*(?:[.:]([a-zA-Z_]\\w*))*)?\\s*(\\<[\\w\\s\\,\\.]*\\>)?\\s*\\(",
      "end": "\\)(?:\\s*(:)\\s*(.+?)(?=\\s*\\b(?:([^\\w.,<])|\\)>)\\s*\\w|\\s*)$)?",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.local.lua"
        },
        "2": {
          "name": "keyword.control.lua"
        },
        "3": {
          "patterns": [
            {
              "match": "\\b(__add|__call|__concat|__div|__eq|__index|__le|__len|__lt|__metatable|__mod|__mode|__mul|__newindex|__pow|__sub|__tostring|__unm)\\b",
              "name": "variable.language.metamethod.lua"
            }
          ],
          "name": "entity.name.function.lua"
        },
        "5": {
          "patterns": [
            {
              "match": "\\b([a-zA-Z]\\w*)\\b",
              "name": "entity.name.type.lua"
            }
          ]
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.operator.type.lua"
        },
        "2": {
          "patterns": [
            {
              "include": "#type_literal"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "match": ">",
              "name": "keyword.operator.type.lua"
            }
          ]
        }
      },
      "patterns": [
        {
          "match": ":",
          "name": "keyword.operator.type.lua"
        },
        {
          "match": "(?<![:>.]\\s*)\\b_\\b",
          "name": "variable.parameter.lua"
        },
        {
          "match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b",
          "name": "variable.other.constant.lua"
        },
        {
          "match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b",
          "name": "variable.parameter.lua"
        },
        {
          "include": "#type_literal"
        },
        {
          "include": "#hover"
        }
      ],
      "contentName": "meta.parameters.lua",
      "name": "meta.function.lua"
    },
    {
      "begin": "\\b(?:(local)\\s+\\b)",
      "end": "(?=\\s*do\\b|\\s*[=;]|\\s*$)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.local.lua"
        }
      },
      "patterns": [
        {
          "match": ":",
          "name": "keyword.operator.type.lua"
        },
        {
          "include": "#keywords"
        },
        {
          "match": "(?<![:>.]\\s*)\\b_\\b",
          "name": "variable.parameter.lua"
        },
        {
          "match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b",
          "name": "variable.other.constant.lua"
        },
        {
          "match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b",
          "name": "variable.other.lua"
        },
        {
          "include": "#type_literal"
        }
      ]
    },
    {
      "match": "\\b(for)\\s+(.+?)(\\bin\\b|(=))",
      "captures": {
        "1": {
          "name": "keyword.control.lua"
        },
        "2": {
          "patterns": [
            {
              "match": ":",
              "name": "keyword.operator.type.lua"
            },
            {
              "match": "(?<![:>.]\\s*)\\b_\\b",
              "name": "variable.parameter.lua"
            },
            {
              "match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b",
              "name": "variable.other.constant.lua"
            },
            {
              "match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b",
              "name": "variable.parameter.lua"
            },
            {
              "include": "#type_literal"
            }
          ]
        },
        "3": {
          "name": "keyword.control.lua"
        },
        "4": {
          "name": "keyword.operator.assignment.lua"
        }
      }
    },
    {
      "begin": "\\b(?:(export)\\s+)?(type)\\s+([^=]+)\\s*(=)",
      "end": "(?=\\s*$)|(?=\\s*;)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.visibility.lua"
        },
        "2": {
          "name": "storage.type.lua"
        },
        "3": {
          "patterns": [
            {
              "match": "[<>]",
              "name": "keyword.operator.type.lua"
            },
            {
              "match": "\\b[a-zA-Z_]\\w*\\b",
              "name": "entity.name.type.alias.lua"
            }
          ]
        },
        "4": {
          "name": "keyword.operator.assignment.lua"
        }
      },
      "patterns": [
        {
          "include": "#type_literal"
        }
      ]
    },
    {
      "include": "#hover"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#standard_library"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#language_constants"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#identifier"
    },
    {
      "include": "#comments"
    }
  ],
  "repository": {
    "standard_library": {
      "patterns": [
        {
          "match": "\\b(delay|DebuggerManager|elapsedTime|PluginManager|printidentity|require|settings|spawn|stats|tick|time|typeof|UserSettings|version|wait|warn)\\b",
          "name": "support.function.lua"
        },
        {
          "match": "\\b(assert|collectgarbage|error|getfenv|getmetatable|ipairs|loadstring|newproxy|next|pairs|pcall|print|rawequal|rawset|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b",
          "name": "support.function.lua"
        },
        {
          "match": "\\b(_G|_VERSION|game|plugin|shared|script|workspace|Enum(?:\\.\\w+){0,2})\\b",
          "name": "constant.language.lua"
        },
        {
          "match": "\\b(bit32\\.(?:arshift|band|bnot|bor|btest|bxor|extract|lrotate|lshift|replace|rrotate|rshift)|coroutine\\.(?:create|isyieldable|resume|running|status|wrap|yield)|debug\\.(?:loadmodule|profilebegin|profileend|traceback)|math\\.(?:abs|acos|asin|atan|atan2|ceil|clamp|cos|cosh|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|noise|pow|rad|random|randomseed|round|sign|sin|sinh|sqrt|tan|tanh)|os\\.(?:clock|date|difftime|time)|string\\.(?:byte|char|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|split|sub|unpack|upper)|table\\.(?:concat|create|find|foreach|foreachi|getn|insert|maxn|move|pack|remove|sort|unpack|clear)|task\\.(?:spawn|synchronize|desynchronize|wait|defer|delay)|utf8\\.(?:char|codepoint|codes|graphemes|len|nfcnormalize|nfdnormalize|offset))\\b",
          "name": "support.function.lua"
        },
        {
          "match": "\\b(bit32|coroutine|debug|math(\\.(huge|pi))?|os|string|table|task|utf8(\\.charpattern)?)\\b",
          "name": "support.constant.lua"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\blocal\\b",
          "name": "storage.modifier.local.lua"
        },
        {
          "match": "\\b(break|do|else|for|if|elseif|return|then|repeat|while|until|end|function|in|continue)\\b",
          "name": "keyword.control.lua"
        },
        {
          "match": "\\b(__add|__call|__concat|__div|__eq|__index|__le|__len|__lt|__metatable|__mod|__mode|__mul|__newindex|__pow|__sub|__tostring|__unm)\\b",
          "name": "variable.language.metamethod.lua"
        },
        {
          "match": "(\\.\\.\\.)",
          "name": "keyword.other.unit.lua"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "(\\+|-(?!-)|/|\\*|%|\\^)",
          "name": "keyword.operator.arithmetic.lua"
        },
        {
          "match": "\\b(and|or|not)\\b",
          "name": "keyword.operator.logical.lua keyword.operator.wordlike.lua"
        },
        {
          "match": "(\\+=|-=|/=|\\*=|%=|\\^=|\\.\\.=|=)",
          "name": "keyword.operator.assignment.lua"
        },
        {
          "match": "(\\.\\.|\\#)",
          "name": "keyword.operator.other.lua"
        },
        {
          "match": "(==|~=|>=|>|<=|<)",
          "name": "keyword.operator.comparison.lua"
        }
      ]
    },
    "language_constants": {
      "patterns": [
        {
          "match": "\\btrue\\b",
          "name": "constant.language.boolean.true.lua"
        },
        {
          "match": "\\bfalse\\b",
          "name": "constant.language.boolean.false.lua"
        },
        {
          "match": "\\bnil\\b",
          "name": "constant.language.nil.lua"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "\\b0_*[xX]_*[\\da-fA-F_]*(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?",
          "name": "constant.numeric.hex.lua"
        },
        {
          "match": "\\b0_*[bB][01_]+(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?",
          "name": "constant.numeric.binary.lua"
        },
        {
          "match": "(?:\\d[\\d_]*(?:\\.[\\d_]*)?|\\.\\d[\\d_]*)(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?",
          "name": "constant.numeric.decimal.lua"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#string_escape"
            }
          ],
          "name": "string.quoted.double.lua"
        },
        {
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "include": "#string_escape"
            }
          ],
          "name": "string.quoted.single.lua"
        },
        {
          "begin": "\\[(=*)\\[",
          "end": "\\]\\1\\]",
          "name": "string.other.multiline.lua"
        }
      ]
    },
    "string_escape": {
      "patterns": [
        {
          "comment": "As it turns out, because backslashes have to be escaped in both JSON and Regex, a single backslash is represented as 4 here",
          "match": "\\\\[abfnrtvz'\"\\\\]",
          "name": "constant.character.escape.lua"
        },
        {
          "match": "\\\\\\d{1,3}",
          "name": "constant.character.escape.lua"
        },
        {
          "match": "\\\\x[0-9a-fA-F]{2}",
          "name": "constant.character.escape.lua"
        },
        {
          "match": "\\\\u\\{[0-9a-fA-F]*\\}",
          "name": "constant.character.escape.lua"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "match": "\\b([A-Z_][A-Z0-9_]*)\\b",
          "name": "variable.other.constant.lua"
        },
        {
          "match": "\\b[a-zA-Z_]\\w*(?=\\()",
          "name": "entity.name.function.lua"
        },
        {
          "match": "(?<=\\.)([a-zA-Z_]\\w*)\\b",
          "name": "variable.other.property.lua"
        },
        {
          "match": "\\b(Axes|BrickColor|CFrame|Color3|ColorSequence|ColorSequenceKeypoint|DateTime|DockWidgetPluginGuiInfo|Faces|Instance|NumberRange|NumberSequence|NumberSequenceKeypoint|OverlapParams|PathWaypoint|PhysicalProperties|Random|Ray|RaycastParams|Rect|Region3|Region3int16|TweenInfo|UDim|UDim2|Vector2|Vector2int16|Vector3|Vector3int16)\\b\\.?(\\b[a-zA-Z_]\\w*(?=\\())?",
          "captures": {
            "1": {
              "name": "support.class.lua"
            },
            "2": {
              "name": "support.function.lua"
            }
          }
        },
        {
          "match": "\\b(self)\\b",
          "name": "variable.language.self.lua"
        },
        {
          "match": "\\b([a-zA-Z_]\\w*)\\b",
          "name": "variable.other.readwrite.lua"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "--\\[(=*)\\[",
          "end": "\\]\\1\\]",
          "name": "comment.block.lua",
          "patterns": [
            {
              "begin": "(```lua)\\s+",
              "beginCaptures": {
                "1": {
                  "name": "comment.lua"
                }
              },
              "end": "(```)",
              "endCaptures": {
                "1": {
                  "name": "comment.lua"
                }
              },
              "name": "keyword.operator.other.lua",
              "patterns": [
                {
                  "include": "source.lua"
                }
              ]
            }
          ]
        },
        {
          "begin": "--",
          "end": "\\n",
          "name": "comment.line.double-dash.lua",
          "patterns": [
            {
              "match": "@\\w+",
              "name": "storage.type.class.lua"
            }
          ]
        }
      ]
    },
    "type_literal": {
      "patterns": [
        {
          "match": "([\\?|\\||\\&])",
          "name": "keyword.operator.type.lua"
        },
        {
          "match": "(->)",
          "name": "keyword.operator.type.lua"
        },
        {
          "begin": "\\b(typeof)\\b\\s*\\(",
          "end": "(?=\\))",
          "beginCaptures": {
            "1": {
              "name": "support.function.lua"
            }
          },
          "patterns": [
            {
              "include": "source.lua"
            }
          ]
        },
        {
          "match": "\\b(readonly)\\b",
          "name": "storage.modifier.readonly.lua"
        },
        {
          "match": "\\btrue\\b",
          "name": "constant.language.boolean.true.lua"
        },
        {
          "match": "\\bfalse\\b",
          "name": "constant.language.boolean.false.lua"
        },
        {
          "begin": "\\b([a-zA-Z]\\w*)\\b(<)",
          "end": "(>)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.lua"
            },
            "2": {
              "name": "keyword.operator.type.lua"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.operator.type.lua"
            }
          },
          "patterns": [
            {
              "include": "#type_literal"
            }
          ],
          "contentName": "meta.parameter.type.variable"
        },
        {
          "match": "\\b(nil|string|number|boolean|thread|userdata|symbol|any)\\b",
          "name": "support.type.primitive.lua"
        },
        {
          "match": "\\b([a-zA-Z]\\w*)\\b",
          "name": "entity.name.type.lua"
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "match": ":",
              "name": "keyword.operator.type.lua"
            },
            {
              "begin": "\\[",
              "end": "\\]",
              "patterns": [
                {
                  "include": "#type_literal"
                }
              ]
            },
            {
              "match": "(?<!:\\s*|->\\s*)\\b([a-zA-Z_]\\w*)\\b",
              "name": "variable.property.lua"
            },
            {
              "include": "#type_literal"
            }
          ]
        },
        {
          "begin": "(\\s*\\<[\\w\\s\\,]*\\>\\s*)?\\(",
          "beginCaptures": {
            "1": {
              "patterns": [
                {
                  "match": "\\b([a-zA-Z]\\w*)\\b",
                  "name": "entity.name.type.lua"
                }
              ]
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "match": "([a-zA-Z_]\\w*)\\s*(:)",
              "name": "variable.parameter.lua",
              "captures": {
                "1": {
                  "name": "variable.parameter.lua"
                },
                "2": {
                  "name": "keyword.operator.type.lua"
                }
              }
            },
            {
              "include": "#type_literal"
            }
          ]
        },
        {
          "include": "#comments"
        },
        {
          "include": "#strings"
        }
      ]
    },
    "hover": {
      "patterns": [
        {
          "begin": "[‎]\\b(global|field|event|property|child|callback)\\b (\\w*)\\.?([\\w.]*)(:) ",
          "end": "[‎]",
          "beginCaptures": {
            "1": {
              "name": "storage"
            },
            "2": {
              "name": "variable.other.readwrite.lua"
            },
            "3": {
              "name": "variable.property.lua"
            },
            "4": {
              "name": "keyword.operator.type.lua"
            }
          },
          "patterns": [
            {
              "include": "#type_literal"
            }
          ]
        },
        {
          "begin": "[‎]\\s*-> ",
          "end": "[‎]",
          "patterns": [
            {
              "match": "(\\w+): (\\w+(\\.)?\\w*)",
              "captures": {
                "1": {
                  "name": "variable.parameter.function.lua"
                },
                "2": {
                  "name": "entity.name.type.lua"
                },
                "3": {
                  "name": "keyword.operator.other.lua"
                }
              }
            },
            {
              "include": "#type_literal"
            }
          ]
        },
        {
          "begin": " [‎]= ",
          "end": "[),]",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "match": "[‎](type)\\s+(\\w+(\\.)?\\w*)",
          "captures": {
            "1": {
              "name": "storage.type.lua"
            },
            "2": {
              "name": "entity.name.type.alias.lua"
            },
            "3": {
              "name": "keyword.operator.other.lua"
            }
          }
        }
      ]
    }
  },
  "scopeName": "source.lua"
}
