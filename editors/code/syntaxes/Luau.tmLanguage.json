{
  "information_for_contributors": [
    "The source of this file is https://github.com/JohnnyMorganz/Luau.tmLanguage/blob/main/Luau.YAML-tmLanguage",
    "If you want to provide a fix or improvement, please create a pull request against the original repository.",
    "Once accepted there, we are happy to receive an update request."
  ],
  "name": "Luau",
  "scopeName": "source.luau",
  "fileTypes": [
    "luau",
    "lua"
  ],
  "patterns": [
    {
      "include": "#shebang"
    },
    {
      "include": "#function-declaration"
    },
    {
      "include": "#local-declaration"
    },
    {
      "include": "#for-loop"
    },
    {
      "include": "#type-alias-declaration"
    },
    {
      "include": "#expression"
    },
    {
      "include": "#comments"
    }
  ],
  "repository": {
    "shebang": {
      "name": "comment.line.shebang.luau",
      "match": "\\A(#!).*(?=$)",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.luau"
        }
      }
    },
    "function-declaration": {
      "name": "meta.function.luau",
      "contentName": "meta.parameters.luau",
      "begin": "\\b(?:(local)\\s*)?(function)\\s*([a-zA-Z_]\\w*(?:[.:]([a-zA-Z_]\\w*))*)?\\s*(\\<[\\w\\s\\,\\.]*\\>)?\\s*\\(",
      "end": "\\)(?:\\s*(:)\\s*(.+?)(?=\\s*\\b(?:([^\\w.,<])|\\)>)\\s*\\w|\\s*)$)?",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.local.luau"
        },
        "2": {
          "name": "keyword.control.luau"
        },
        "3": {
          "name": "entity.name.function.luau",
          "patterns": [
            {
              "name": "variable.language.metamethod.luau",
              "match": "\\b(__add|__call|__concat|__div|__eq|__index|__le|__len|__lt|__metatable|__mod|__mode|__mul|__newindex|__pow|__sub|__tostring|__unm)\\b"
            }
          ]
        },
        "5": {
          "patterns": [
            {
              "name": "entity.name.type.luau",
              "match": "\\b([a-zA-Z]\\w*)\\b"
            }
          ]
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.operator.type.luau"
        },
        "2": {
          "patterns": [
            {
              "include": "#type_literal"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "name": "keyword.operator.type.luau",
              "match": ">"
            }
          ]
        }
      },
      "patterns": [
        {
          "name": "keyword.operator.type.luau",
          "match": ":"
        },
        {
          "name": "variable.parameter.luau",
          "match": "(?<![:>.]\\s*)\\b_\\b"
        },
        {
          "name": "variable.other.constant.luau",
          "match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b"
        },
        {
          "name": "variable.parameter.luau",
          "match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b"
        },
        {
          "include": "#type_literal"
        }
      ]
    },
    "local-declaration": {
      "begin": "\\b(?:(local)\\s+\\b)",
      "end": "(?=\\s*do\\b|\\s*[=;]|\\s*$)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.local.luau"
        }
      },
      "patterns": [
        {
          "name": "keyword.operator.type.luau",
          "match": ":"
        },
        {
          "include": "#keywords"
        },
        {
          "name": "variable.parameter.luau",
          "match": "(?<![:>.]\\s*)\\b_\\b"
        },
        {
          "name": "variable.other.constant.luau",
          "match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b"
        },
        {
          "name": "variable.other.luau",
          "match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b"
        },
        {
          "include": "#type_literal"
        }
      ]
    },
    "for-loop": {
      "match": "\\b(for)\\s+(.+?)(\\bin\\b|(=))",
      "captures": {
        "1": {
          "name": "keyword.control.luau"
        },
        "2": {
          "patterns": [
            {
              "name": "keyword.operator.type.luau",
              "match": ":"
            },
            {
              "name": "variable.parameter.luau",
              "match": "(?<![:>.]\\s*)\\b_\\b"
            },
            {
              "name": "variable.other.constant.luau",
              "match": "(?<![:>.]\\s*)\\b([A-Z_][A-Z0-9_]*)\\b"
            },
            {
              "name": "variable.parameter.luau",
              "match": "(?<![:>.]\\s*)\\b([a-zA-Z_]\\w*)\\b"
            },
            {
              "include": "#type_literal"
            }
          ]
        },
        "3": {
          "name": "keyword.control.luau"
        },
        "4": {
          "name": "keyword.operator.assignment.luau"
        }
      }
    },
    "type-alias-declaration": {
      "begin": "\\b(?:(export)\\s+)?(type)\\s+([^=]+)\\s*(=)",
      "end": "(?=\\s*$)|(?=\\s*;)",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.visibility.luau"
        },
        "2": {
          "name": "storage.type.luau"
        },
        "3": {
          "patterns": [
            {
              "name": "keyword.operator.type.luau",
              "match": "[<>]"
            },
            {
              "name": "entity.name.type.alias.luau",
              "match": "\\b[a-zA-Z_]\\w*\\b"
            }
          ]
        },
        "4": {
          "name": "keyword.operator.assignment.luau"
        }
      },
      "patterns": [
        {
          "include": "#type_literal"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "storage.modifier.local.luau",
          "match": "\\blocal\\b"
        },
        {
          "name": "keyword.control.luau",
          "match": "\\b(break|do|else|for|if|elseif|return|then|repeat|while|until|end|function|in|continue)\\b"
        },
        {
          "name": "variable.language.metamethod.luau",
          "match": "\\b(__add|__call|__concat|__div|__eq|__index|__le|__len|__lt|__metatable|__mod|__mode|__mul|__newindex|__pow|__sub|__tostring|__unm)\\b"
        },
        {
          "name": "keyword.other.unit.luau",
          "match": "(\\.\\.\\.)"
        }
      ]
    },
    "standard_library": {
      "patterns": [
        {
          "name": "support.function.luau",
          "match": "\\b(assert|collectgarbage|error|getfenv|getmetatable|ipairs|loadstring|newproxy|next|pairs|pcall|print|rawequal|rawset|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall|require|typeof)\\b"
        },
        {
          "name": "constant.language.luau",
          "match": "\\b(_G|_VERSION)\\b"
        },
        {
          "name": "support.function.luau",
          "match": "\\b(bit32\\.(?:arshift|band|bnot|bor|btest|bxor|extract|lrotate|lshift|replace|rrotate|rshift)|coroutine\\.(?:create|isyieldable|resume|running|status|wrap|yield)|debug\\.(?:loadmodule|profilebegin|profileend|traceback)|math\\.(?:abs|acos|asin|atan|atan2|ceil|clamp|cos|cosh|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|noise|pow|rad|random|randomseed|round|sign|sin|sinh|sqrt|tan|tanh)|os\\.(?:clock|date|difftime|time)|string\\.(?:byte|char|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|split|sub|unpack|upper)|table\\.(?:concat|create|find|foreach|foreachi|getn|insert|maxn|move|pack|remove|sort|unpack|clear)|task\\.(?:spawn|synchronize|desynchronize|wait|defer|delay)|utf8\\.(?:char|codepoint|codes|graphemes|len|nfcnormalize|nfdnormalize|offset))\\b"
        },
        {
          "name": "support.constant.luau",
          "match": "\\b(bit32|coroutine|debug|math(\\.(huge|pi))?|os|string|table|task|utf8(\\.charpattern)?)\\b"
        },
        {
          "name": "support.function.luau",
          "match": "\\b(delay|DebuggerManager|elapsedTime|PluginManager|printidentity|settings|spawn|stats|tick|time|UserSettings|version|wait|warn)\\b"
        },
        {
          "name": "constant.language.luau",
          "match": "\\b(game|plugin|shared|script|workspace|Enum(?:\\.\\w+){0,2})\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.luau",
          "match": "(\\+|-(?!-)|/|\\*|%|\\^)"
        },
        {
          "name": "keyword.operator.logical.luau keyword.operator.wordlike.luau",
          "match": "\\b(and|or|not)\\b"
        },
        {
          "name": "keyword.operator.assignment.luau",
          "match": "(\\+=|-=|/=|\\*=|%=|\\^=|\\.\\.=|=)"
        },
        {
          "name": "keyword.operator.other.luau",
          "match": "(\\.\\.|\\#)"
        },
        {
          "name": "keyword.operator.comparison.luau",
          "match": "(==|~=|>=|>|<=|<)"
        },
        {
          "begin": "(::)\\s+",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.typeassertion.luau"
            }
          },
          "end": "(?=^|[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|(::\\s+)|(\\s+\\<))",
          "patterns": [
            {
              "include": "#type_literal"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.luau",
          "match": "\\b0_*[xX]_*[\\da-fA-F_]*(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?"
        },
        {
          "name": "constant.numeric.binary.luau",
          "match": "\\b0_*[bB][01_]+(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?"
        },
        {
          "name": "constant.numeric.decimal.luau",
          "match": "(?:\\d[\\d_]*(?:\\.[\\d_]*)?|\\.\\d[\\d_]*)(?:[eE][\\+\\-]?_*\\d[\\d_]*(?:\\.[\\d_]*)?)?"
        }
      ]
    },
    "language_constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.luau",
          "match": "\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.luau",
          "match": "\\bfalse\\b"
        },
        {
          "name": "constant.language.nil.luau",
          "match": "\\bnil\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.luau",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#string_escape"
            }
          ]
        },
        {
          "name": "string.quoted.single.luau",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "include": "#string_escape"
            }
          ]
        },
        {
          "name": "string.other.multiline.luau",
          "begin": "\\[(=*)\\[",
          "end": "\\]\\1\\]"
        },
        {
          "name": "string.interpolated.luau",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "include": "#interpolated-string-expression"
            },
            {
              "include": "#string_escape"
            }
          ]
        }
      ]
    },
    "string_escape": {
      "patterns": [
        {
          "name": "constant.character.escape.luau",
          "match": "\\\\[abfnrtvz'\"`{\\\\]"
        },
        {
          "name": "constant.character.escape.luau",
          "match": "\\\\\\d{1,3}"
        },
        {
          "name": "constant.character.escape.luau",
          "match": "\\\\x[0-9a-fA-F]{2}"
        },
        {
          "name": "constant.character.escape.luau",
          "match": "\\\\u\\{[0-9a-fA-F]*\\}"
        }
      ]
    },
    "interpolated-string-expression": {
      "name": "meta.template.expression.luau",
      "contentName": "meta.embedded.line.luau",
      "begin": "\\{",
      "end": "\\}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.interpolated-string-expression.begin.luau"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.interpolated-string-expression.end.luau"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#keywords"
        },
        {
          "include": "#standard_library"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#language_constants"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#identifier"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "name": "variable.other.constant.luau",
          "match": "\\b([A-Z_][A-Z0-9_]*)\\b"
        },
        {
          "name": "entity.name.function.luau",
          "match": "\\b[a-zA-Z_]\\w*(?=\\()"
        },
        {
          "name": "variable.other.property.luau",
          "match": "(?<=\\.)([a-zA-Z_]\\w*)\\b"
        },
        {
          "name": "variable.language.self.luau",
          "match": "\\b(self)\\b"
        },
        {
          "name": "variable.other.readwrite.luau",
          "match": "\\b([a-zA-Z_]\\w*)\\b"
        },
        {
          "match": "\\b(Axes|BrickColor|CFrame|Color3|ColorSequence|ColorSequenceKeypoint|DateTime|DockWidgetPluginGuiInfo|Faces|Instance|NumberRange|NumberSequence|NumberSequenceKeypoint|OverlapParams|PathWaypoint|PhysicalProperties|Random|Ray|RaycastParams|Rect|Region3|Region3int16|TweenInfo|UDim|UDim2|Vector2|Vector2int16|Vector3|Vector3int16)\\b\\.?(\\b[a-zA-Z_]\\w*(?=\\())?",
          "captures": {
            "1": {
              "name": "support.class.luau"
            },
            "2": {
              "name": "support.function.luau"
            }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.luau",
          "begin": "--\\[(=*)\\[",
          "end": "\\]\\1\\]",
          "patterns": [
            {
              "name": "keyword.operator.other.luau",
              "begin": "(```lua)\\s+",
              "end": "(```)",
              "beginCaptures": {
                "1": {
                  "name": "comment.luau"
                }
              },
              "endCaptures": {
                "1": {
                  "name": "comment.luau"
                }
              },
              "patterns": [
                {
                  "include": "source.luau"
                }
              ]
            },
            {
              "include": "#doc_comment_tags"
            }
          ]
        },
        {
          "name": "comment.line.double-dash.documentation.luau",
          "begin": "---",
          "end": "\\n",
          "patterns": [
            {
              "include": "#doc_comment_tags"
            }
          ]
        },
        {
          "name": "comment.line.double-dash.luau",
          "begin": "--",
          "end": "\\n"
        }
      ]
    },
    "doc_comment_tags": {
      "patterns": [
        {
          "name": "storage.type.class.luadoc.luau",
          "match": "@\\w+"
        },
        {
          "match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s)+(\\b\\w+\\b)",
          "captures": {
            "1": {
              "name": "storage.type.class.luadoc.luau"
            },
            "2": {
              "name": "variable.parameter.luau"
            }
          }
        }
      ]
    },
    "type_literal": {
      "patterns": [
        {
          "name": "keyword.operator.type.luau",
          "match": "([\\?|\\||\\&])"
        },
        {
          "name": "keyword.operator.type.luau",
          "match": "(->)"
        },
        {
          "begin": "\\b(typeof)\\b\\s*\\(",
          "end": "\\)(?![.,:\\)])",
          "beginCaptures": {
            "1": {
              "name": "support.function.luau"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "support.type.primitive.luau",
          "match": "\\b(nil|string|number|boolean|thread|userdata|symbol|any)\\b"
        },
        {
          "include": "#language_constants"
        },
        {
          "begin": "\\b([a-zA-Z]\\w*)\\b(<)",
          "end": "(>)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.luau"
            },
            "2": {
              "name": "keyword.operator.type.luau"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.operator.type.luau"
            }
          },
          "patterns": [
            {
              "include": "#type_literal"
            }
          ],
          "contentName": "meta.parameter.type.variable.luau"
        },
        {
          "name": "entity.name.type.luau",
          "match": "\\b([a-zA-Z]\\w*)\\b"
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "name": "keyword.operator.type.luau",
              "match": ":"
            },
            {
              "begin": "\\[",
              "end": "\\]",
              "patterns": [
                {
                  "include": "#type_literal"
                }
              ]
            },
            {
              "name": "variable.property.luau",
              "match": "(?<!:\\s*|->\\s*)\\b([a-zA-Z_]\\w*)\\b(?=:)"
            },
            {
              "include": "#type_literal"
            }
          ]
        },
        {
          "begin": "(\\s*\\<[\\w\\s\\,]*\\>\\s*)?\\(",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "patterns": [
                {
                  "name": "entity.name.type.luau",
                  "match": "\\b([a-zA-Z]\\w*)\\b"
                }
              ]
            }
          },
          "patterns": [
            {
              "name": "variable.parameter.luau",
              "match": "([a-zA-Z_]\\w*)\\s*(:)",
              "captures": {
                "1": {
                  "name": "variable.parameter.luau"
                },
                "2": {
                  "name": "keyword.operator.type.luau"
                }
              }
            },
            {
              "include": "#type_literal"
            }
          ]
        },
        {
          "include": "#strings"
        },
        {
          "include": "#comments"
        }
      ]
    }
  }
}